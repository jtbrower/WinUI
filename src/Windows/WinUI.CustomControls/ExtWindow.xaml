<Window
    x:Class="WinUI.CustomControls.ExtWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behave="using:WinUI.CustomControls.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:media="using:Microsoft.UI.Xaml.Media"    
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"    
    xmlns:local="using:WinUI.CustomControls"
    xmlns:app="using:Microsoft.UI.Xaml"    
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <!--
    
        Warning : When using the drag move feature, it attaches to the Window's Content.  If the content does not
        have a color assigned, it will not register pointer down events.
        
        Size is set to stretch so we can use as much space as possible for both dragging and point down events.
    -->
    <Grid
        x:Name="RootContainer"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        Background="Transparent">
        <Grid.Resources>
            <local:TypeNameDataTemplateSelector
            x:Key="TypeNameDataTemplateSelector"                
            x:Name="TypeNameDataTemplateSelector" />
        </Grid.Resources>
        <!--
            For those developers who come from a WPF background like myself, the reason that I attach the
            DragMoveBehavior to a class that is some sort of "Panel" rather than the Window itself is due
            to the fact that the WinUI Window is not a DepedencyObject.  DepedencyObject is required as
            the generic type for a Behavior.
        -->
        <interactivity:Interaction.Behaviors>
            <!-- Do not let the DragMove happen on a Maximized Window-->
            <behave:DragMoveBehavior AllowDragOnMaximizedWindow="False" />
        </interactivity:Interaction.Behaviors>

        <ContentControl
                    x:Name="ClientContentControl"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Content="{x:Bind Path=Vm, Mode=OneWay}"
                    ContentTemplateSelector="{StaticResource TypeNameDataTemplateSelector}" />
    </Grid>
</Window>
