<Page
    x:Class="WinUI.CustomControls.SettingsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="using:Microsoft.Toolkit.Uwp.UI.Extensions"
    xmlns:local="using:WinUI.CustomControls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:media="using:Microsoft.Toolkit.Uwp.UI.Media"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    mc:Ignorable="d">
    <Page.Resources>
        <!--  Button style just so I can keep them the same width and apply a small margin.  -->
        <Style TargetType="Button">
            <Setter Property="MinWidth" Value="200" />
            <Setter Property="Margin" Value="1" />
            <Setter Property="VerticalAlignment" Value="Top" />
        </Style>
        <!--
            This is a brush that I use to paint the background of a Virtual Keyboard component that I wrote
            for my point-of-sale application.
        -->
        <LinearGradientBrush
            x:Key="KeyboardBackgroundBrush"
            MappingMode="Absolute"
            StartPoint="411,362"
            EndPoint="411,93">
            <LinearGradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Offset="0.81" Color="#B9B7BB" />
                    <GradientStop Offset="0.86" Color="#B9B7BB" />
                    <GradientStop Offset="0.92" Color="#E2E7E9" />
                    <GradientStop Offset="0.95" Color="#D9DFE1" />
                    <GradientStop Offset="0.96" Color="#B2B5B8" />
                    <GradientStop Offset="0.98" Color="#9C9C9D" />
                </GradientStopCollection>
            </LinearGradientBrush.GradientStops>
            <LinearGradientBrush.Transform>
                <TransformGroup>
                    <RotateTransform Angle="-0.05" />
                    <TranslateTransform X="-107.34" Y="-98.92" />
                </TransformGroup>
            </LinearGradientBrush.Transform>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="KeyBoardBorderBrush" Color="DarkGray" />
        <Style x:Key="KeyboardBorderStyle" TargetType="Border">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="CornerRadius" Value="10" />
            <Setter Property="BorderBrush" Value="{StaticResource KeyBoardBorderBrush}" />
            <Setter Property="Background" Value="{StaticResource KeyboardBackgroundBrush}" />
        </Style>
    </Page.Resources>

    <Grid
        x:Name="MainGrid"
        HorizontalAlignment="Center"
        VerticalAlignment="Center"
        Background="Transparent">

        <Canvas Name="DropShadowCanvas" Margin="0,0,5,5" />

        <Rectangle
            x:Name="RectangleInstance"
            Width="{Binding ElementName=MainContentBorder, Path=Width}"
            Height="{Binding ElementName=MainContentBorder, Path=Height}"
            Margin="0,0,5,5"
            Fill="Black"
            RadiusX="10"
            RadiusY="10" />

        <Border
            x:Name="MainContentBorder"
            Margin="0,0,5,5"
            Style="{StaticResource KeyboardBorderStyle}">
            <!--
                Note that I attach a double tap handler to the MainWindow to maximize the window.  However, I don't want a button double tap
                to cause the window to maximize because it is confusing.  So I wrote an attached property to swallow the button double taps
                but I don't yet know how to attach it to all buttons through a style without other hand waving tricks at this moment. Note
                that there is a property IsDoubleTapEnabled on the buttons setting that to false does not prevent the handler from still
                passing on to the Window.
            -->
            <StackPanel VerticalAlignment="Center" Margin="5">
                <Button Click="RemoveWindowBorder_Click" Content="Remove Window Border">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="AddWindowBorder_Click" Content="Add Window Border">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="MaximizeWindow_Click" Content="Maximize">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="MinimizeWindow_Click" Content="Minimize">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="RestoreWindow_Click" Content="Restore">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <StackPanel Orientation="Horizontal">
                    <Button Click="SetWindowTransparency_Click" Content="Set Transparency">
                        <Interactivity:Interaction.Behaviors>
                            <local:SwallowButtonDoubleTapBehavior />
                        </Interactivity:Interaction.Behaviors>
                    </Button>
                    <muxc:NumberBox
                        Header="Window Transparency"
                        LargeChange="20"
                        Maximum="100"
                        Minimum="0"
                        SmallChange="5"
                        SpinButtonPlacementMode="Inline"
                        ValidationMode="InvalidInputOverwritten"
                        Value="{x:Bind Path=Vm.NumberBoxValue, Mode=TwoWay}" />

                </StackPanel>
                <Button Click="RemoveWindowTransparency_Click" Content="Remove Transparency">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="SizeToContent_Click" Content="Size to Content">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>
                <Button Click="CloseWindow_Click" Content="Close Window">
                    <Interactivity:Interaction.Behaviors>
                        <local:SwallowButtonDoubleTapBehavior />
                    </Interactivity:Interaction.Behaviors>
                </Button>                
            </StackPanel>
        </Border>
    </Grid>
</Page>
