// MIT License
//
// Author  : Jason T. Brower
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
namespace WinUI.Vm
{
    using System.Windows.Input;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   A ViewModel for the title bar. </summary>
    ///
    /// <seealso cref="WinUI.Vm.PropChangeBase"/>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public class TitleBarVm : PropChangeBase
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The title. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private string? _title;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the title. </summary>
        ///
        /// <value> The title. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public string? Title { get => _title; set => SetProperty(ref _title, value); }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The close window command. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private ICommand? _closeWindowCmd;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the 'close window' command. </summary>
        ///
        /// <value> The 'close window' command. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public ICommand? CloseWindowCmd
        {
            get => _closeWindowCmd;
            set => SetProperty(ref _closeWindowCmd, value);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The minimize window command. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private ICommand? _minimizeWindowCmd;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the 'minimize window' command. </summary>
        ///
        /// <value> The 'minimize window' command. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public ICommand? MinimizeWindowCmd
        {
            get => _minimizeWindowCmd;
            set => SetProperty(ref _minimizeWindowCmd, value);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The maximize window command. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private ICommand? _maximizeWindowCmd;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the 'maximize window' command. </summary>
        ///
        /// <value> The 'maximize window' command. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public ICommand? MaximizeWindowCmd
        {
            get => _maximizeWindowCmd;
            set => SetProperty(ref _maximizeWindowCmd, value);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   The restore window command. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        private ICommand? _restoreWindowCmd;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the 'restore window' command. </summary>
        ///
        /// <value> The 'restore window' command. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public ICommand? RestoreWindowCmd
        {
            get => _restoreWindowCmd;
            set => SetProperty(ref _restoreWindowCmd, value);
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   True if is visible, false if not. </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool _isVisible=true;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets a value indicating whether this  is visible. </summary>
        ///
        /// <value> True if this  is visible, false if not. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public bool IsVisible
        {
            get => _isVisible;
            set => SetProperty(ref _isVisible, value);
        }
    }
}
