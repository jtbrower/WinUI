<controls:LayoutTransformControl
    x:Class="Oceanside.WinUI.Base.WindowView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:app="using:Microsoft.UI.Xaml"
    xmlns:behave="using:Oceanside.WinUI.Base.Behaviors"
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:converters="using:Microsoft.Toolkit.Uwp.UI.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:local="using:Oceanside.WinUI.Base"
    xmlns:templates="using:Oceanside.WinUI.Base.Templates"    
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:media="using:Microsoft.UI.Xaml.Media"
    xmlns:vm="using:Oceanside.WinUI.Base.Vm"
    RenderTransformOrigin=".5,.5"
    HorizontalContentAlignment="Stretch"
    VerticalContentAlignment="Stretch"
    mc:Ignorable="d">
    <controls:LayoutTransformControl.Resources>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" FalseValue="Collapsed" />
        <templates:TypeNameDataTemplateSelector
            x:Key="TypeNameDataTemplateSelector"
            x:Name="TypeNameDataTemplateSelector"/>
    </controls:LayoutTransformControl.Resources>
    <controls:LayoutTransformControl.Transform>
        <!--  This ScaleTransform is used in the code behind to scale content when the DPI changes.  -->
        <media:ScaleTransform
            x:Name="ContentScaleTransform"
            CenterX=".5"
            CenterY=".5"
            ScaleX="1.0"
            ScaleY="1.0" />
    </controls:LayoutTransformControl.Transform>
    <controls:LayoutTransformControl.Child>
        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <!--
                It is important to note the purpose of having a Grid that only contains another Grid.  Notice how I have
                attached a RoundedDropShadowBehavior to the Grid directly below.  That behavior will automatically
                create an insert the shapes, sprites and controls required to render the shadow with rounded corners.
                However, as automated as that is, it still needs a location to place those elements that will not
                interfere with existing content.  In this case, the elements are placed right here.  I will admit that
                this isn't intuitive because the developer needs to know this ahead of time.  I could have wrapped
                the callers content inside a Grid for them, but that requires me to remove the callers content from
                the XAML tree and this will cause the callers unloaded events to fire.  Another option was to force
                the caller to create the Canvas and Rectangle needed to render the Shadow but that isn't intuitive
                either.
                
                Since I am not designing a control library for the masses, I accept the ease of using this shadow over
                needing to place it in an empty element that inherits from Panel, hence the Grid.
            -->
            <Grid
                x:Name="ChildGrid"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Background="White">
                <!--
                    This Drop Shadow is what I was referring to in the comment above.  The Shadow will be placed around
                    this square Grid.  I could even round the shadow corners without needing to use a Border.  See the
                    CornerRadius property.
                -->
                <interactivity:Interaction.Behaviors>
                    <behave:RoundedDropShadowBehavior x:Name="ChildGridDropShadow" CornerRadius="0" />
                </interactivity:Interaction.Behaviors>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <!--  I completely remove the Win32 TitleBar and Window Border and replace it with this custom one.  -->
                <ContentControl
                    Grid.Row="0"
                    Margin="0,0,0,5"
                    HorizontalContentAlignment="Stretch"
                    VerticalContentAlignment="Stretch"
                    Content="{x:Bind Path=Vm.TitleBarVm, Mode=OneWay}"
                    ContentTemplateSelector="{StaticResource TypeNameDataTemplateSelector}"
                    Visibility="{x:Bind Path=Vm.TitleBarVm.IsVisible, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />

                <!-- 
                  This will display the content that the caller wants to show.  If you create a new view and a view model, you just
                  need to make sure that there is an existing DataTemplate so that when you set this to show your view model it 
                  knows how to template your content.
                -->
                <ContentControl
                    x:Name="ClientContentControl"
                    Grid.Row="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Content="{x:Bind Path=Vm.ClientsContent, Mode=OneWay}"
                    ContentTemplateSelector="{StaticResource TypeNameDataTemplateSelector}" />
            </Grid>
        </Grid>
    </controls:LayoutTransformControl.Child>
</controls:LayoutTransformControl>
