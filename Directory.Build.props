<!--
  Directory.Build.props is imported very early in Microsoft.Common.props, and properties defined
  later are unavailable to it. So, avoid referring to properties that are not yet defined (and
  will evaluate to empty). In those cases, use the .targets files.
-->
<Project>

  <PropertyGroup>
    <RootNamespace>$(MSBuildProjectName)</RootNamespace>
    <TargetPlatformVersion>10.0.18362.0</TargetPlatformVersion>
    <TargetPlatformMinVersion>10.0.17134.0</TargetPlatformMinVersion>
    <Platforms>x86;x64</Platforms>
    <RuntimeIdentifiers>win-x86;win-x64</RuntimeIdentifiers>
    <RuntimeIdentifier>win-$(Platform)</RuntimeIdentifier>

    <!-- Set the assembly name to the project name. -->
    <AssemblyName>$(MSBuildProjectName)</AssemblyName>
    <AssemblyTitle>$(MSBuildProjectName)</AssemblyTitle>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <RestoreProjectStyle>PackageReference</RestoreProjectStyle>

    <!--
      Keep an eye on this one.  There was a warning coming from the WinUI Microsoft.UI.Xaml.Markup.Compiler.props that
      "GenerateLibraryLayout is not needed for including Xaml files when the Pack target is ran" because it results in access
      file copies.  Upon further investigation I was not setting either of the bools GenerateLibraryLayout or 
      IncludeXamlFilesInNugetPackage that needed to be true for the warning to show.  If you follow the directions and set
      GenerateLibraryLayout to false, you will see errors regarding duplicate files.  If you set 
      IncludeXamlFilesInNugetPackage to false it builds as expected without the warnings.  I don't think the 
      IncludeXamlFilesInNugetPackage is needed unless we begin packaging the libs into NuGets, but this long comment
      will remain in any file that sets this to false.
    -->
    <IncludeXamlFilesInNugetPackage>false</IncludeXamlFilesInNugetPackage>
  
  </PropertyGroup>

  <PropertyGroup>
    <RepoRoot>$(MSBuildThisFileDirectory)\</RepoRoot>
  </PropertyGroup>

  <PropertyGroup>
    <!--
      Keep the binary files out of the solution view
      -->
    <DefaultItemExcludes>$(DefaultItemExcludes);artifacts\**;obj\**;bin\**;lib\**;pdb\**</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)\.editorconfig" Link=".editorconfig" />
    <None Include="$(MSBuildThisFileDirectory)\MIT.licenseheader" Link="MIT.licenseheader" />
  </ItemGroup>

  <PropertyGroup>
    <!--I love Nullable.-->
    <Nullable>enable</Nullable>

    <!-- Warning level 4 displays all warnings. -->
    <WarningLevel>4</WarningLevel>

    <!--
    CA131 do not catch general exception types.
    -->
    <NoWarn>$(NoWarn);CA1031</NoWarn>
    <!--
    CA1303 Put string resources into a table
    -->
    <NoWarn>$(NoWarn);CA1303</NoWarn>

    <!--
    CS8305 warns about using evaluation code such as CompositionShadow
    -->
    <NoWarn>$(NoWarn);CS8305</NoWarn>

    <!--
    Using nullable without #nullable being enabled will false alarm sometimes.
    -->
    <NoWarn>$(NoWarn);CS8632</NoWarn>
  </PropertyGroup>

</Project>