{"name":"Winui","tagline":"Migration from WPF to WinUI Desktop","body":"### My WPF to WinUI Desktop Journey\r\nAs of 2020, I have been developing and supporting WPF applications for about 13 years.  From 2012 up to 2020, I desperately wanted to migrate the WPF XAML over to a more performant version such as UWP or WinUI.  However, until 2020, I wasn't able to make that leap, because the type of applications that I write (point-of-sale systems) require more control over the operating system than the sandboxed architecture that UWP support.  \r\n\r\nWhen the WinUI team announced that their first wave of WinUI 3 would support desktop applications, I was elated.  Elated, but cautiously optimistic, because the WinUI team needed more time to achieve the massive task of decoupling the user interface from the runtime.  As of July 11th 2020, I had spent exactly one week evaluating WinUI.  I have been excited to have all of the user interface tools that those of us WPF developers were missing.  First and foremost, I needed the rendering performance that wasn't available in WPF.\r\n\r\n#### Window Architecture \r\nOne of the biggest challenges that I felt I needed to address immediately, was to create missing Window features that were available out of the box with WPF, but completely missing from WinUI.  I realized in the first day that the WinUI Window, is actually a Window's OS Window; not a DependencyObject and not a class that the WinUI team has control over.  \r\n\r\n**Examples of Missing Out-of-the-box Window Features**\r\n* Cannot Set the Window Size\r\n* No way to set the Startup Location of the Window\r\n* Cannot extend the Window by adding dependency properties to it\r\n* Cannot remove the Window border/menu/titlebar to create a look-less Window\r\n* Now way to make the Window transparent\r\n* No method to obtain the Window's Handle that you need to overcome the other missing features\r\n* No Window Maximize, Minimize, Restore\r\n* No way to support DragMove once you figure out how to make the Window look-less.\r\n* No way to set the Window icon\r\n\r\n#### Freshen up on PInvoke\r\nTo overcome these missing features isn't a quick task.  The information available can be confusing for Desktop developers because you will believe that you have found a way to achieve your old WPF feature, but will realize that its not available to Desktop applications.  For example CoreWindow, stay away from it because its only for UWP applications.  It took me a few days to realize that the lack of out-of-the box features could be achieved using a whole bunch of PInvoke calls. It took an entire week to realize that I could have saved myself a lot of code by using this [PInvoke library](https://github.com/dotnet/pinvoke).  that means that my initial check-in of code examples uses a mix of my own NativeMethods.cs declarations and that wonderful PInvoke library.  \r\n\r\n#### I will do my Best\r\nI will do my best to share my WPF to WinUI Desktop journey so that others can avoid the pitfalls that I landed in.  I have a huge task ahead of me and I am learning a lot rather quickly.  I will try to update this repo as I move along, but I have to stay focused on my primary goal to convert a big WPF/Net5.0 POS system over to WinUI.  If you think of anything that could help this repo out, please feel free to share.  I still have some work to do on the Window work-arounds, if you have answers that I don't, I am all ears.\r\n \r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}